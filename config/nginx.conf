                            server {
	    #escucha conexiones https seguras por el puerto 443 (standard) para ipv4	
            listen 443 ssl;
	    #para conexiones ipv6
            listen [::]:443 ssl;

	    #nombre del servidor o dominio que NGINX debe reconocer paara este bloque de servidor
	    server_name alvicina.42.fr;
	    
            #se indica la ubicacion tanto del certificado ssl como de la private key generada		    
	    ssl_certificate      /etc/nginx/ssl/alvicina.crt;
            ssl_certificate_key  /etc/nginx/ssl/alvicina.key;
		
	    #se especifica los protocolos de cifrado que se permitiran para las conexiones seguras
            ssl_protocols TLSv1.2 TLSv1.3;		

	    #especifica el directorio raiz desde dnde Nginx servira los archivos
            root /var/www/wordpress;

	    #index define los que deberan de considerarse como indices cuando se accede a un directorio
            index index.php index.nginx-debian.html;

            #define como manejar las solicitudes para diferentes URI. La directiva TRY_FILES
	    #intenta servir el archivo especificado por la URL ($uri), un directorio ($uri/)
            #o redirigir a index.php con los parametros originales ($is_args$args) si los
	    #archivos anteriores no existen
            location / {
                try_files $uri $uri/ /index.php$is_args$args;
            }

	    #bloque de configuracion específico para manejar archivos PHP en un servidor NGINX
            location ~ \.php$ {
		 #divide la URL en dos partes: el nombre del script PHP y la info adicional de la ruta
		 fastcgi_split_path_info ^(.+\.php)(/.+)$;
                 #todas las solicitudes php deben ser enviadas a un proceso de FastCGI que escucha en
                 #el puert 9000 del contenedor wordpress. El servicio de efecucion de scripts PHP
                 #estara en otro contenedor separado del de NGINX.
		 fastcgi_pass wordpress:9000;
		 #especifica el archivo predeterminado que FastCGI debe usar cuando no se para uno
                 #desde la URL 
		 fastcgi_index index.php;
                 #incluye archivo de configuracion estandar que define varios parametros comunes
                 #que se necesitan en las solicitudes FastCGI
		 include fastcgi_params;
                 #Define el parametro SCRIPT_FILENAME que se pasa a PHP-FPM. Este parametro es la ruta
                 #completa al script PHP que debe ejecutarse
		 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		 #establece el parametro SCRIPT_NAME que es el nombre del script PHP a ejecutar	
             	 fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            }

            location ~/\.ht {
                   deny all;
            }

 }

     
server {
	    #escucha conexiones https seguras por el puerto 443 (standard) para ipv4	
            listen 443 ssl;
	    #para conexiones ipv6
            listen [::]:443 ssl;

	    #nombre del servidor o dominio que NGINX debe reconocer paara este bloque de servidor
	    server_name alvicina.42.fr;
	    
            #se indica la ubicacion tanto del certificado ssl como de la private key generada		    
	    ssl_certificate      /etc/nginx/ssl/alvicina.crt;
            ssl_certificate_key  /etc/nginx/ssl/alvicina.key;
		
	    #se especifica los protocolos de cifrado que se permitiran para las conexiones seguras
            ssl_protocols TLSv1.2 TLSv1.3;		

	    #especifica el directorio raiz desde dnde Nginx servira los archivos
            root /var/www/wordpress;

	    #index define los que deberan de considerarse como indices cuando se accede a un directorio
            index index.php index.nginx-debian.html;

            #define como manejar las solicitudes para diferentes URI. La directiva TRY_FILES
	    #intenta servir el archivo especificado por la URL ($uri), un directorio ($uri/)
            #o redirigir a index.php con los parametros originales ($is_args$args) si los
	    #archivos anteriores no existen
            location / {
                try_files $uri $uri/ /index.php$is_args$args;
            }

	    #bloque de configuracion específico para manejar archivos PHP en un servidor NGINX
            location ~ \.php$ {
		 #divide la URL en dos partes: el nombre del script PHP y la info adicional de la ruta
		 fastcgi_split_path_info ^(.+\.php)(/.+)$;
                 #todas las solicitudes php deben ser enviadas a un proceso de FastCGI que escucha en
                 #el puert 9000 del contenedor wordpress. El servicio de efecucion de scripts PHP
                 #estara en otro contenedor separado del de NGINX.
		 fastcgi_pass wordpress:9000;
		 #especifica el archivo predeterminado que FastCGI debe usar cuando no se para uno
                 #desde la URL 
		 fastcgi_index index.php;
                 #incluye archivo de configuracion estandar que define varios parametros comunes
                 #que se necesitan en las solicitudes FastCGI
		 include fastcgi_params;
                 #Define el parametro SCRIPT_FILENAME que se pasa a PHP-FPM. Este parametro es la ruta
                 #completa al script PHP que debe ejecutarse
		 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		 #establece el parametro SCRIPT_NAME que es el nombre del script PHP a ejecutar	
             	 fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            }

            location ~/\.ht {
                   deny all;
            }

 }

server {
	    #escucha conexiones https seguras por el puerto 443 (standard) para ipv4	
            listen 443 ssl;
	    #para conexiones ipv6
            listen [::]:443 ssl;

	    #nombre del servidor o dominio que NGINX debe reconocer paara este bloque de servidor
	    server_name alvicina.42.fr;
	    
            #se indica la ubicacion tanto del certificado ssl como de la private key generada		    
	    ssl_certificate      /etc/nginx/ssl/alvicina.crt;
            ssl_certificate_key  /etc/nginx/ssl/alvicina.key;
		
	    #se especifica los protocolos de cifrado que se permitiran para las conexiones seguras
            ssl_protocols TLSv1.2 TLSv1.3;		

	    #especifica el directorio raiz desde dnde Nginx servira los archivos
            root /var/www/wordpress;

	    #index define los que deberan de considerarse como indices cuando se accede a un directorio
            index index.php index.nginx-debian.html;

            #define como manejar las solicitudes para diferentes URI. La directiva TRY_FILES
	    #intenta servir el archivo especificado por la URL ($uri), un directorio ($uri/)
            #o redirigir a index.php con los parametros originales ($is_args$args) si los
	    #archivos anteriores no existen
            location / {
                try_files $uri $uri/ /index.php$is_args$args;
            }

	    #bloque de configuracion específico para manejar archivos PHP en un servidor NGINX
            location ~ \.php$ {
		 #divide la URL en dos partes: el nombre del script PHP y la info adicional de la ruta
		 fastcgi_split_path_info ^(.+\.php)(/.+)$;
                 #todas las solicitudes php deben ser enviadas a un proceso de FastCGI que escucha en
                 #el puert 9000 del contenedor wordpress. El servicio de efecucion de scripts PHP
                 #estara en otro contenedor separado del de NGINX.
		 fastcgi_pass wordpress:9000;
		 #especifica el archivo predeterminado que FastCGI debe usar cuando no se para uno
                 #desde la URL 
		 fastcgi_index index.php;
                 #incluye archivo de configuracion estandar que define varios parametros comunes
                 #que se necesitan en las solicitudes FastCGI
		 include fastcgi_params;
                 #Define el parametro SCRIPT_FILENAME que se pasa a PHP-FPM. Este parametro es la ruta
                 #completa al script PHP que debe ejecutarse
		 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		 #establece el parametro SCRIPT_NAME que es el nombre del script PHP a ejecutar	
             	 fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            }

            location ~/\.ht {
                   deny all;
            }

 }

     
      







      






    







